unit dm.Rest;

interface

uses
  System.SysUtils,
  System.Classes,
  Rest.Types,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Param,
  FireDAC.Stan.Error,
  FireDAC.DatS,
  FireDAC.Phys.Intf,
  FireDAC.DApt.Intf,
  Data.DB,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client,
  Rest.Response.Adapter,
  Rest.Client,
  Data.Bind.Components,
  Data.Bind.ObjectScope;

type
  TBookThumbLoaded = procedure(const aStream: TStream) of object;
  TBookUrl = procedure(const aUrl: string) of object;

  TdmRest = class(TDataModule)
    RESTClient: TRESTClient;
    RESTRequest: TRESTRequest;
    RESTResponse: TRESTResponse;
    RestRespDataSet: TRESTResponseDataSetAdapter;
    fdMemT_Books: TFDMemTable;
    FloatField_Booksid: TFloatField;
    WStr_Booksname: TWideStringField;
    WStr_Booksurl: TWideStringField;
    WStr_Booksthumb: TWideStringField;
    WStr_Bookslang: TWideStringField;
    WStr_Bookspubdate: TWideStringField;
    procedure DataModuleCreate(Sender: TObject);
    procedure fdMemT_BooksAfterScroll(DataSet: TDataSet);
  private
    fOnThumbLoaded: TBookThumbLoaded;
    fOnBookUrl: TBookUrl;
    procedure DoLoadThumbAsync(const aUrl: string);
  public
    property OnThumbLoaded: TBookThumbLoaded read fOnThumbLoaded write fOnThumbLoaded;
    property OnBookUrl: TBookUrl read fOnBookUrl write fOnBookUrl;
  end;

var
  dmRest: TdmRest;

implementation
uses
  System.Net.HttpClient,
  System.Threading;

{%CLASSGROUP 'FMX.Controls.TControl'}

{$R *.dfm}

procedure TdmRest.DataModuleCreate(Sender: TObject);
begin
  RESTRequest.Execute;
end;

procedure TdmRest.DoLoadThumbAsync(const aUrl: string);
begin
  TTask.Run(
    procedure
    var
      LHttp: THTTPClient;
      LResp: IHTTPResponse;
      LMem, LStreamCopy: TMemoryStream;
    begin
      LHttp := THTTPClient.Create;
      try
        LMem := TMemoryStream.Create;
        try
          LResp := LHttp.Get(aUrl, LMem);
          if LResp.StatusCode = 200 then
          begin
            // make a copy while we're still on worker thread
            LStreamCopy := TMemoryStream.Create;
            LMem.Position := 0;
            LStreamCopy.LoadFromStream(LMem);
            LStreamCopy.Position := 0;

            if Assigned(fOnThumbLoaded) then
              TThread.Queue(nil,
                procedure
                begin
                  fOnThumbLoaded(LStreamCopy);
                  // caller (UI) owns LStreamCopy now
                end);
          end;
        finally
          LMem.Free;
        end;
      finally
        LHttp.Free;
      end;
    end);
end;

procedure TdmRest.fdMemT_BooksAfterScroll(DataSet: TDataSet);
var
  LUrl: string;
begin
  LUrl := DataSet.FieldByName('thumb').AsString;
  if LUrl <> '' then
    if Assigned(fOnBookUrl) then begin
      fOnBookUrl(LUrl);
      DoLoadThumbAsync(LUrl);
    end;
end;

end.
